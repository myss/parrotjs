#include "parrot/parrot.h"
#include "pmc_pjsstring.h"

#include "pjs_math.h"

extern INTVAL dynpmc_PjsObject;
extern INTVAL dynpmc_PjsFunction;
extern INTVAL dynpmc_PjsArray;
extern INTVAL dynpmc_PjsUndefined;
extern INTVAL dynpmc_PjsNull;
extern INTVAL dynpmc_PjsNumber;
extern INTVAL dynpmc_PjsString;
extern INTVAL dynpmc_PjsBoolean;
extern INTVAL dynpmc_PjsPropEntry;
extern INTVAL dynpmc_PjsSeq;

extern void pjs_init_dynpmc_types(Interp* interp);
extern PMC* toPrimitive(Interp* interp, PMC* object);

pmclass PjsNumber
    dynpmc
    group pjs_group
    hll Pjs
    does float
    does integer
    extends Float
    maps Float 
    maps Integer {
    
    PMC *new_from_string(STRING *rep, INTVAL flags) {
        PMC *res;
        const INTVAL type = SELF->vtable->base_type;

        if (flags & PObj_constant_FLAG)
            res = constant_pmc_new(INTERP, type);
        else
            res = pmc_new(INTERP, type);

        PMC_num_val(res) = string_to_num(INTERP, rep);
        return res;
    }

    void class_init() {
        if (pass) {
            pjs_init_dynpmc_types(INTERP);
        }
    }
        
    void assign_pmc(PMC* value) {
        DYNSELF.set_number_native(VTABLE_get_number(INTERP, value));
    }
    
    void set_string_native(STRING* rep) {
        PMC_num_val(SELF) = string_to_num(INTERP, rep);
    }
    
    void set_integer_native(INTVAL i) {
        VTABLE_set_number_native(INTERP, SELF, i);
    }
    INTVAL get_integer() {
        return (INTVAL) VTABLE_get_number(INTERP, SELF);
    }  

    PMC* add (PMC* value, PMC* dest) {
        MMD_PjsString: {
            STRING* str = VTABLE_get_string(INTERP, SELF);
            STRING* str2 = VTABLE_get_string(INTERP, value);
            if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_PjsString);
            } else if (dest->vtable->base_type != dynpmc_PjsString) {
                    VTABLE_morph(INTERP, dest, dynpmc_PjsString);
            }
            VTABLE_set_string_native(INTERP, dest, 
                string_concat(INTERP, str, str2, 0));
            return dest;
        }
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_ADD);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    DYNSELF.get_number() + VTABLE_get_number(INTERP, value));
            return dest;
        }
    }

    PMC* subtract (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_SUBTRACT);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    DYNSELF.get_number() - VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* multiply (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_MULTIPLY);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    DYNSELF.get_number() * VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* divide (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_DIVIDE);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    DYNSELF.get_number() / VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* cmodulus(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_DIVIDE);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    fmod(DYNSELF.get_number(), VTABLE_get_number(INTERP, value)));
            return dest;
        }
    }
    PMC* bitwise_shl(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_BSL);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = DYNSELF.get_number();
            left = PJS_TO_INTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left << right);
            return dest;
        }
    }
    PMC* bitwise_shr(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_BSR);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = DYNSELF.get_number();
            left = PJS_TO_INTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left >> right);
            return dest;
        }
    }
    PMC* bitwise_lsr(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_LSR);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = DYNSELF.get_number();
            left = PJS_TO_UINTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left >> right);
            return dest;
        }
    }
    void i_bitwise_not() {
        FLOATVAL f = DYNSELF.get_number();
        INTVAL i = PJS_TO_INTVAL(f);
        DYNSELF.set_number_native((FLOATVAL) ~i);
    }
    INTVAL cmp (PMC* value) {
        FLOATVAL left = DYNSELF.get_number();
        FLOATVAL right = VTABLE_get_number(INTERP, value);
        if (left < right)
            return -1;
        else if(left > right)
            return 1;
        else
            return 0;
    }
    INTVAL is_equal(PMC* value) {
        MMD_PjsNumber: {
            return DYNSELF.get_number() == VTABLE_get_number(INTERP, value);
        }
        MMD_DEFAULT: {
            return 0;
        }
    }
    PMC* bitwise_and(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, PJS_TO_INTVAL(a) & PJS_TO_INTVAL(b));
        return dest;
    }
    PMC* bitwise_and_int(INTVAL value, PMC* dest) {
        FLOATVAL a;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = DYNSELF.get_number();
        VTABLE_set_number_native(INTERP, dest, PJS_TO_INTVAL(a) & value);
        return dest;
    }
    void i_bitwise_and(PMC* value) {
        FLOATVAL a, b;
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        DYNSELF.set_number_native(PJS_TO_INTVAL(a) & PJS_TO_INTVAL(b));
    }
    void i_bitwise_and_int(INTVAL value) {
        FLOATVAL a, b;
        a = DYNSELF.get_number();
        DYNSELF.set_number_native(PJS_TO_INTVAL(a) & value);
    }
    
    PMC* bitwise_or(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) | PJS_TO_INTVAL(b));
        return dest;
    }
    PMC* bitwise_xor(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) ^ PJS_TO_INTVAL(b));
        return dest;
    }
    void i_bitwise_xor(PMC* value) {
        FLOATVAL a, b;
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        DYNSELF.set_number_native(PJS_TO_INTVAL(a) ^ PJS_TO_INTVAL(b));
    }
    void i_bitwise_or(PMC* value) {
        FLOATVAL a, b;
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        DYNSELF.set_number_native(PJS_TO_INTVAL(a) | PJS_TO_INTVAL(b));
    }
    void i_bitwise_or_int(INTVAL value) {
        FLOATVAL a, b;
        a = DYNSELF.get_number();
        DYNSELF.set_number_native(PJS_TO_INTVAL(a) | value);
    }
        
        
    STRING* get_string() {
        FLOATVAL f = PMC_num_val(SELF);
        if (PJS_IS_NAN(f))
            return string_from_literal(INTERP, "NaN");
        else if(PJS_IS_POSINF(f))
            return string_from_literal(INTERP, "Infinity");
        else if(PJS_IS_NEGINF(f))
            return string_from_literal(INTERP, "-Infinity");
        else if(f == -0.0) /* snprintf can give '-0' */
            return string_from_literal(INTERP, "0");
        else {
            char str[51];
            /* TODO does not work exactly, look more carefully at
                the ecma spec */
            snprintf(str, 50, "%.16g", f);
            return string_from_cstring(INTERP, str, 0);
        }
    }
    INTVAL get_bool() {
        FLOATVAL f = DYNSELF.get_number();
        if (f == 0.0 || PJS_IS_NAN(f))
            return 0;
        else
            return 1;
    }

    METHOD STRING* getJsType() {
        return string_from_literal(INTERP, "number");
    }

    METHOD PMC* toPrimitive() {
        return SELF;
    }
    METHOD PMC* toPrimitive_hint_string() {
        return SELF;
    }
    METHOD PMC* toPrimitive_hint_number() {
        return SELF;
    }
    METHOD void be_nan() {
        VTABLE_set_number_native(INTERP, SELF, PJS_NAN);
    }
    METHOD void be_posinf() {
        VTABLE_set_number_native(INTERP, SELF, PJS_POSINF);
    }
    METHOD void be_neginf() {
        VTABLE_set_number_native(INTERP, SELF, PJS_NEGINF);
    }
    METHOD INTVAL is_nan() {
        FLOATVAL f = VTABLE_get_number(INTERP, SELF);
        return PJS_IS_NAN(f);
    }
    METHOD INTVAL is_posinf() {
        FLOATVAL f = VTABLE_get_number(INTERP, SELF);
        return PJS_IS_POSINF(f);
    }
    METHOD INTVAL is_neginf() {
        FLOATVAL f = VTABLE_get_number(INTERP, SELF);
        return PJS_IS_NEGINF(f);
    }
    METHOD INTVAL is_uint() {
        FLOATVAL f = VTABLE_get_number(INTERP, SELF);
        return PJS_IS_UINTVAL(f);
    }
    METHOD INTVAL is_int() {
        FLOATVAL f = VTABLE_get_number(INTERP, SELF);
        return PJS_IS_INTVAL(f);
    }
}
