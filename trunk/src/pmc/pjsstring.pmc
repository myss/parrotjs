#include "parrot/parrot.h"
#include "pjs_math.h"

extern INTVAL dynpmc_PjsObject;
extern INTVAL dynpmc_PjsFunction;
extern INTVAL dynpmc_PjsArray;
extern INTVAL dynpmc_PjsUndefined;
extern INTVAL dynpmc_PjsNull;
extern INTVAL dynpmc_PjsNumber;
extern INTVAL dynpmc_PjsString;
extern INTVAL dynpmc_PjsBoolean;
extern INTVAL dynpmc_PjsPropEntry;
extern INTVAL dynpmc_PjsSeq;

extern void pjs_init_dynpmc_types(Interp* interp);
extern PMC* toPrimitive(Interp* interp, PMC* object);

static INTVAL 
equalIgnoreCase(const char* a, const char* b, int max) {
    int i;
    for(i=0; i<max && *a && *b; i++, a++, b++) {
        char ac = *a, bc = *b;
        if (ac >= 'A' && ac <= 'Z')
            ac -= 'A' - 'a';
        if (bc >= 'A' && bc <= 'Z')
            bc -= 'A' - 'a';
        if (ac != bc)
            return 0;
    }
    if (i==max)
        return 1;
    else
        return *a == *b;
}

/* modified from src/string.c */
static FLOATVAL
to_num(Interp *interp, const STRING *s)
{
    FLOATVAL f = PJS_NAN;
    DECL_CONST_CAST;

    if (s) {
        char * const cstr = string_to_cstring(interp, const_cast(s));
        
        const char *start = cstr; /* after the trailing whitespace at the begin */
        const char *end; /* before the trailing whitespace at the end */

        while (isspace(*start))
            start++;
        end = start + strlen(start);
        while(end > start && isspace(*(end-1)))
            end--;
        
        if (start == end) /* everything was whitespace */
            return 0.0;
        else if (strncmp(start, "Infinity", end-start) == 0)
            f = PJS_POSINF;
        else if (strncmp(start, "+Infinity", end-start) == 0)
            f = PJS_POSINF;
        else if (strncmp(start, "-Infinity", end-start) == 0)
            f = PJS_NEGINF;
        else {
            char* parsed_end;
            FLOATVAL g = strtod(start, &parsed_end);
            /* inf or infinity in another case may not be accepted */
            if (equalIgnoreCase(start, "infinity", parsed_end-start) ||
                equalIgnoreCase(start, "+infinity", parsed_end-start) ||
                equalIgnoreCase(start, "-infinity", parsed_end-start))
                f = PJS_NAN;
            else if (parsed_end == end)
                f = g;
            else
                f = PJS_NAN;
        }
        string_cstring_free(cstr);

    }
    return f;
}



pmclass PjsString
    dynpmc
    extends String
    group pjs_group
    hll Pjs
    maps String {


    void class_init() {
        if (pass) {
            pjs_init_dynpmc_types(INTERP);
        }
    }

    FLOATVAL get_number() {
        STRING* str = VTABLE_get_string(INTERP, SELF);
        return to_num(INTERP, str);
    }


    PMC* add (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_ADD);
        }
        MMD_DEFAULT: {
            STRING* str = DYNSELF.get_string();
            STRING* str2 = VTABLE_get_string(INTERP, value);
            if (PMC_IS_NULL(dest))
                dest = pmc_new(INTERP, SELF->vtable->base_type);
            else if (dest->vtable->base_type != SELF->vtable->base_type) {
                VTABLE_morph(INTERP, dest, SELF->vtable->base_type);
            }
            VTABLE_set_string_native(INTERP, dest, 
                string_concat(INTERP, str, str2, 0));
            return dest;
        }
    }
    PMC* subtract (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_SUBTRACT);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    DYNSELF.get_number() - VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* multiply (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_MULTIPLY);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    DYNSELF.get_number() * VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* divide (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_DIVIDE);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    DYNSELF.get_number() / VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* cmodulus(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_DIVIDE);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    fmod(DYNSELF.get_number(), VTABLE_get_number(INTERP, value)));
            return dest;
        }
    }
    PMC* bitwise_shl(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_BSL);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = DYNSELF.get_number();
            left = PJS_TO_INTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left << right);
            return dest;
        }
    }
    PMC* bitwise_shr(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_BSR);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = DYNSELF.get_number();
            left = PJS_TO_INTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left >> right);
            return dest;
        }
    }
    PMC* bitwise_lsr(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_LSR);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = DYNSELF.get_number();
            left = PJS_TO_UINTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left >> right);
            return dest;
        }
    }
    INTVAL cmp (PMC* value) {
        MMD_PjsString: {
            STRING *s = VTABLE_get_string(INTERP, SELF);
            STRING *v = VTABLE_get_string(INTERP, value);
            return string_compare(INTERP, s, v);
        }
        MMD_DEFAULT: {
            FLOATVAL left = DYNSELF.get_number();
            FLOATVAL right = VTABLE_get_number(INTERP, value);
            if (left < right)
                return -1;
            else if(left > right)
                return 1;
            else
                return 0;
        }
    }
    INTVAL is_equal(PMC* value) {
        MMD_PjsString: {
            STRING *s = VTABLE_get_string(INTERP, SELF);
            STRING *v = VTABLE_get_string(INTERP, value);
            return string_compare(INTERP, s, v) == 0;
        }
        MMD_DEFAULT: {
            return 0;
        }
    }
    PMC* bitwise_and(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) & PJS_TO_INTVAL(b));
        return dest;
    }
    PMC* bitwise_or(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) | PJS_TO_INTVAL(b));
        return dest;
    }
    PMC* bitwise_xor(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = DYNSELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) ^ PJS_TO_INTVAL(b));
        return dest;
    }

    INTVAL get_bool() {
        return string_length(INTERP, DYNSELF.get_string()) != 0;
    }
    METHOD STRING* getJsType() {
        return string_from_literal(INTERP, "string");
    }
    METHOD PMC* toPrimitive() {
        return SELF;
    }
    METHOD PMC* toPrimitive_hint_string() {
        return SELF;
    }
    METHOD PMC* toPrimitive_hint_number() {
        return SELF;
    }

}
