#include "parrot/parrot.h"
#include "pmc_pjsstring.h"
#include "pmc_pjsnumber.h"
#include "pjs_math.h"

INTVAL pjs_dynpmcs_inited = 0;

INTVAL dynpmc_PjsObject;
INTVAL dynpmc_PjsFunction;
INTVAL dynpmc_PjsArray;
INTVAL dynpmc_PjsUndefined;
INTVAL dynpmc_PjsNull;
INTVAL dynpmc_PjsNumber;
INTVAL dynpmc_PjsString;
INTVAL dynpmc_PjsBoolean;
INTVAL dynpmc_PjsPropEntry;
INTVAL dynpmc_PjsSeq;

extern PMC* toPrimitive(Interp* interp, PMC* object);

void pjs_init_dynpmc_types(Interp* interp) {
    if (! pjs_dynpmcs_inited) {
        dynpmc_PjsObject    = pmc_type(interp,
            string_from_literal(interp, "PjsObject"));
        dynpmc_PjsFunction  = pmc_type(interp,
            string_from_literal(interp, "PjsFunction"));
        dynpmc_PjsArray     = pmc_type(interp,
            string_from_literal(interp, "PjsArray"));
        dynpmc_PjsUndefined = pmc_type(interp,
            string_from_literal(interp, "PjsUndefined"));
        dynpmc_PjsNull      = pmc_type(interp,
            string_from_literal(interp, "PjsNull"));
        dynpmc_PjsNumber    = pmc_type(interp,
            string_from_literal(interp, "PjsNumber"));
        dynpmc_PjsString    = pmc_type(interp,
            string_from_literal(interp, "PjsString"));
        dynpmc_PjsBoolean   = pmc_type(interp,
            string_from_literal(interp, "PjsBoolean"));
        dynpmc_PjsPropEntry = pmc_type(interp,
            string_from_literal(interp, "PjsPropEntry"));
        dynpmc_PjsSeq       = pmc_type(interp,
            string_from_literal(interp, "PjsSeq"));
        pjs_dynpmcs_inited = 1;
    }
    
}


pmclass PjsNull
    dynpmc
    group pjs_group
    hll Pjs {

    void class_init() {
        if (pass) {
            pjs_init_dynpmc_types(INTERP);
        }
    }

    INTVAL get_bool() {
        return 0;
    }
    INTVAL get_integer() {
        return 0;
    }
    FLOATVAL get_number() {
        return 0;
    }
    STRING* get_string() {
        return string_from_literal(interp, "null");
    }
    METHOD getJsType() {
        STRING* js_type = string_from_literal(INTERP, "object");
        RETURN(STRING* js_type);
    }
    INTVAL is_equal(PMC* value) {
        MMD_PjsNull: {
            return 1;
        }
        MMD_DEFAULT: {
            return 0;
        }
    }

    opcode_t* invoke(void* next) {
        real_exception(INTERP, NULL, E_NotImplementedError,
                       "null can't be invoked!");
        return NULL;
    }


    /* Standard vtables for a primitive value */

    void morph(INTVAL new_type) {
        pmc_reuse(INTERP, SELF, new_type, 0);
    }

    void set_bool(INTVAL value) {
        SELF.morph(dynpmc_PjsBoolean);
        SELF.set_bool(value);
    }

    void set_number_native(FLOATVAL value) {
        SELF.morph(dynpmc_PjsNumber);
        SELF.set_number_native(value);
    }

    void set_integer_native(INTVAL value) {
        SELF.morph(dynpmc_PjsNumber);
        SELF.set_integer_native(value);
    }

    METHOD toPrimitive() {
        PMC* me = SELF;
        RETURN(PMC* me);
    }
    METHOD toPrimitive_hint_string() {
        PMC* me = SELF;
        RETURN(PMC* me);
    }
    METHOD toPrimitive_hint_number() {
        PMC* me = SELF;
        RETURN(PMC* me);
    }

    PMC* logical_not(PMC* dest) {
        if (PMC_IS_NULL(dest))
            dest = pmc_new(INTERP, dynpmc_PjsBoolean);
        else
            VTABLE_morph(INTERP, dest, dynpmc_PjsBoolean);
        VTABLE_set_bool(INTERP, dest, ! SELF.get_bool());
        return dest;
    }

    PMC* add (PMC* value, PMC* dest) {
        MMD_PjsString: {
            STRING* str = VTABLE_get_string(INTERP, SELF);
            STRING* str2 = VTABLE_get_string(INTERP, value);
            if (PMC_IS_NULL(dest)) {
                    dest = pmc_new(INTERP, dynpmc_PjsString);
            } else if (dest->vtable->base_type != dynpmc_PjsString) {
                    VTABLE_morph(INTERP, dest, dynpmc_PjsString);
            }
            VTABLE_set_string_native(INTERP, dest, 
                string_concat(INTERP, str, str2, 0));
            return dest;
        }
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_ADD);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() + VTABLE_get_number(INTERP, value));
            return dest;
        }
    }

    PMC* subtract (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_SUBTRACT);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() - VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* multiply (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_MULTIPLY);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() * VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* divide (PMC* value, PMC* dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_DIVIDE);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    SELF.get_number() / VTABLE_get_number(INTERP, value));
            return dest;
        }
    }
    PMC* cmodulus(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_DIVIDE);
        }
        MMD_DEFAULT: {
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            VTABLE_set_number_native(INTERP, dest,
                    fmod(SELF.get_number(), VTABLE_get_number(INTERP, value)));
            return dest;
        }
    }
    PMC* bitwise_shl(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_BSL);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = SELF.get_number();
            left = PJS_TO_INTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left << right);
            return dest;
        }
    }
    PMC* bitwise_shr(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_BSR);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = SELF.get_number();
            left = PJS_TO_INTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left >> right);
            return dest;
        }
    }
    PMC* bitwise_lsr(PMC *value, PMC *dest) {
        MMD_PjsObject: {
            return mmd_dispatch_p_ppp(INTERP, SELF, toPrimitive(INTERP, value), dest, MMD_LSR);
        }
        MMD_DEFAULT: {
            INTVAL left;
            UINTVAL right;
            FLOATVAL temp;
            if (PMC_IS_NULL(dest)) {
                dest = pmc_new(INTERP, dynpmc_PjsNumber);
            } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
                VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
            }
            temp = SELF.get_number();
            left = PJS_TO_UINTVAL(temp);
            temp = VTABLE_get_number(INTERP, value);
            right = PJS_TO_UINTVAL(temp) & 0x1F;
            VTABLE_set_number_native(INTERP, dest, left >> right);
            return dest;
        }
    }
    INTVAL cmp (PMC* value) {
        FLOATVAL left = SELF.get_number();
        FLOATVAL right = VTABLE_get_number(INTERP, value);
        if (left < right)
            return -1;
        else if(left > right)
            return 1;
        else
            return 0;
    }
    PMC* bitwise_and(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = SELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) & PJS_TO_INTVAL(b));
        return dest;
    }
    PMC* bitwise_or(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = SELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) | PJS_TO_INTVAL(b));
        return dest;
    }
    PMC* bitwise_xor(PMC* value, PMC* dest) {
        FLOATVAL a, b;
        if (PMC_IS_NULL(dest)) {
            dest = pmc_new(INTERP, dynpmc_PjsNumber);
        } else if (dest->vtable->base_type != dynpmc_PjsNumber) {
            VTABLE_morph(INTERP, dest, dynpmc_PjsNumber);
        }
        a = SELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        VTABLE_set_number_native(INTERP, dest, 
                                    PJS_TO_INTVAL(a) ^ PJS_TO_INTVAL(b));
        return dest;
    }
    void i_bitwise_xor(PMC* value) {
        FLOATVAL a, b;
        a = SELF.get_number();
        b = VTABLE_get_number(INTERP, value);
        SELF.set_number_native(PJS_TO_INTVAL(a) ^ PJS_TO_INTVAL(b));
    }

}
